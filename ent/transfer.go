// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/s14t284/simplebank/ent/account"
	"github.com/s14t284/simplebank/ent/transfer"
)

// Transfer is the model entity for the Transfer schema.
type Transfer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FromAccountID holds the value of the "from_account_id" field.
	FromAccountID int `json:"from_account_id,omitempty"`
	// ToAccountID holds the value of the "to_account_id" field.
	ToAccountID int `json:"to_account_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int `json:"amount,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransferQuery when eager-loading is set.
	Edges TransferEdges `json:"edges"`
}

// TransferEdges holds the relations/edges for other nodes in the graph.
type TransferEdges struct {
	// FromAccounts holds the value of the from_accounts edge.
	FromAccounts *Account `json:"from_accounts,omitempty"`
	// ToAccounts holds the value of the to_accounts edge.
	ToAccounts *Account `json:"to_accounts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FromAccountsOrErr returns the FromAccounts value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransferEdges) FromAccountsOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.FromAccounts == nil {
			// The edge from_accounts was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.FromAccounts, nil
	}
	return nil, &NotLoadedError{edge: "from_accounts"}
}

// ToAccountsOrErr returns the ToAccounts value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransferEdges) ToAccountsOrErr() (*Account, error) {
	if e.loadedTypes[1] {
		if e.ToAccounts == nil {
			// The edge to_accounts was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.ToAccounts, nil
	}
	return nil, &NotLoadedError{edge: "to_accounts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transfer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case transfer.FieldID, transfer.FieldFromAccountID, transfer.FieldToAccountID, transfer.FieldAmount:
			values[i] = new(sql.NullInt64)
		case transfer.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Transfer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transfer fields.
func (t *Transfer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transfer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case transfer.FieldFromAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_account_id", values[i])
			} else if value.Valid {
				t.FromAccountID = int(value.Int64)
			}
		case transfer.FieldToAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field to_account_id", values[i])
			} else if value.Valid {
				t.ToAccountID = int(value.Int64)
			}
		case transfer.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				t.Amount = int(value.Int64)
			}
		case transfer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryFromAccounts queries the "from_accounts" edge of the Transfer entity.
func (t *Transfer) QueryFromAccounts() *AccountQuery {
	return (&TransferClient{config: t.config}).QueryFromAccounts(t)
}

// QueryToAccounts queries the "to_accounts" edge of the Transfer entity.
func (t *Transfer) QueryToAccounts() *AccountQuery {
	return (&TransferClient{config: t.config}).QueryToAccounts(t)
}

// Update returns a builder for updating this Transfer.
// Note that you need to call Transfer.Unwrap() before calling this method if this Transfer
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transfer) Update() *TransferUpdateOne {
	return (&TransferClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Transfer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transfer) Unwrap() *Transfer {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transfer is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transfer) String() string {
	var builder strings.Builder
	builder.WriteString("Transfer(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", from_account_id=")
	builder.WriteString(fmt.Sprintf("%v", t.FromAccountID))
	builder.WriteString(", to_account_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ToAccountID))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", t.Amount))
	builder.WriteString(", created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Transfers is a parsable slice of Transfer.
type Transfers []*Transfer

func (t Transfers) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
