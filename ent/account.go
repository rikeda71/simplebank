// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/s14t284/simplebank/ent/account"
	"github.com/s14t284/simplebank/ent/transfer"
)

// Account is the model entity for the Account schema.
type Account struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner string `json:"owner,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance int `json:"balance,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountQuery when eager-loading is set.
	Edges AccountEdges `json:"edges"`
}

// AccountEdges holds the relations/edges for other nodes in the graph.
type AccountEdges struct {
	// Entries holds the value of the entries edge.
	Entries []*Entry `json:"entries,omitempty"`
	// FromTransfers holds the value of the from_transfers edge.
	FromTransfers *Transfer `json:"from_transfers,omitempty"`
	// ToTransfers holds the value of the to_transfers edge.
	ToTransfers *Transfer `json:"to_transfers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// EntriesOrErr returns the Entries value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) EntriesOrErr() ([]*Entry, error) {
	if e.loadedTypes[0] {
		return e.Entries, nil
	}
	return nil, &NotLoadedError{edge: "entries"}
}

// FromTransfersOrErr returns the FromTransfers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountEdges) FromTransfersOrErr() (*Transfer, error) {
	if e.loadedTypes[1] {
		if e.FromTransfers == nil {
			// The edge from_transfers was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: transfer.Label}
		}
		return e.FromTransfers, nil
	}
	return nil, &NotLoadedError{edge: "from_transfers"}
}

// ToTransfersOrErr returns the ToTransfers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountEdges) ToTransfersOrErr() (*Transfer, error) {
	if e.loadedTypes[2] {
		if e.ToTransfers == nil {
			// The edge to_transfers was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: transfer.Label}
		}
		return e.ToTransfers, nil
	}
	return nil, &NotLoadedError{edge: "to_transfers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Account) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case account.FieldID, account.FieldBalance:
			values[i] = new(sql.NullInt64)
		case account.FieldOwner, account.FieldCurrency:
			values[i] = new(sql.NullString)
		case account.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Account", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Account fields.
func (a *Account) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case account.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case account.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				a.Owner = value.String
			}
		case account.FieldBalance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				a.Balance = int(value.Int64)
			}
		case account.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				a.Currency = value.String
			}
		case account.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryEntries queries the "entries" edge of the Account entity.
func (a *Account) QueryEntries() *EntryQuery {
	return (&AccountClient{config: a.config}).QueryEntries(a)
}

// QueryFromTransfers queries the "from_transfers" edge of the Account entity.
func (a *Account) QueryFromTransfers() *TransferQuery {
	return (&AccountClient{config: a.config}).QueryFromTransfers(a)
}

// QueryToTransfers queries the "to_transfers" edge of the Account entity.
func (a *Account) QueryToTransfers() *TransferQuery {
	return (&AccountClient{config: a.config}).QueryToTransfers(a)
}

// Update returns a builder for updating this Account.
// Note that you need to call Account.Unwrap() before calling this method if this Account
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Account) Update() *AccountUpdateOne {
	return (&AccountClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Account entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Account) Unwrap() *Account {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Account is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Account) String() string {
	var builder strings.Builder
	builder.WriteString("Account(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", owner=")
	builder.WriteString(a.Owner)
	builder.WriteString(", balance=")
	builder.WriteString(fmt.Sprintf("%v", a.Balance))
	builder.WriteString(", currency=")
	builder.WriteString(a.Currency)
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Accounts is a parsable slice of Account.
type Accounts []*Account

func (a Accounts) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
